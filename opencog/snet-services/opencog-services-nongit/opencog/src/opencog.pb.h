// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencog.proto

#ifndef PROTOBUF_INCLUDED_opencog_2eproto
#define PROTOBUF_INCLUDED_opencog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_opencog_2eproto 

namespace protobuf_opencog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_opencog_2eproto
namespace opencogservices {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CommandOutput;
class CommandOutputDefaultTypeInternal;
extern CommandOutputDefaultTypeInternal _CommandOutput_default_instance_;
}  // namespace opencogservices
namespace google {
namespace protobuf {
template<> ::opencogservices::Command* Arena::CreateMaybeMessage<::opencogservices::Command>(Arena*);
template<> ::opencogservices::CommandOutput* Arena::CreateMaybeMessage<::opencogservices::CommandOutput>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace opencogservices {

// ===================================================================

class CommandOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencogservices.CommandOutput) */ {
 public:
  CommandOutput();
  virtual ~CommandOutput();

  CommandOutput(const CommandOutput& from);

  inline CommandOutput& operator=(const CommandOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandOutput(CommandOutput&& from) noexcept
    : CommandOutput() {
    *this = ::std::move(from);
  }

  inline CommandOutput& operator=(CommandOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandOutput* internal_default_instance() {
    return reinterpret_cast<const CommandOutput*>(
               &_CommandOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CommandOutput* other);
  friend void swap(CommandOutput& a, CommandOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandOutput* New() const final {
    return CreateMaybeMessage<CommandOutput>(NULL);
  }

  CommandOutput* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandOutput>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandOutput& from);
  void MergeFrom(const CommandOutput& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string s = 1;
  void clear_s();
  static const int kSFieldNumber = 1;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // @@protoc_insertion_point(class_scope:opencogservices.CommandOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_opencog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencogservices.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(NULL);
  }

  Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // string arg1 = 2;
  void clear_arg1();
  static const int kArg1FieldNumber = 2;
  const ::std::string& arg1() const;
  void set_arg1(const ::std::string& value);
  #if LANG_CXX11
  void set_arg1(::std::string&& value);
  #endif
  void set_arg1(const char* value);
  void set_arg1(const char* value, size_t size);
  ::std::string* mutable_arg1();
  ::std::string* release_arg1();
  void set_allocated_arg1(::std::string* arg1);

  // string arg2 = 3;
  void clear_arg2();
  static const int kArg2FieldNumber = 3;
  const ::std::string& arg2() const;
  void set_arg2(const ::std::string& value);
  #if LANG_CXX11
  void set_arg2(::std::string&& value);
  #endif
  void set_arg2(const char* value);
  void set_arg2(const char* value, size_t size);
  ::std::string* mutable_arg2();
  ::std::string* release_arg2();
  void set_allocated_arg2(::std::string* arg2);

  // string arg3 = 4;
  void clear_arg3();
  static const int kArg3FieldNumber = 4;
  const ::std::string& arg3() const;
  void set_arg3(const ::std::string& value);
  #if LANG_CXX11
  void set_arg3(::std::string&& value);
  #endif
  void set_arg3(const char* value);
  void set_arg3(const char* value, size_t size);
  ::std::string* mutable_arg3();
  ::std::string* release_arg3();
  void set_allocated_arg3(::std::string* arg3);

  // string arg4 = 5;
  void clear_arg4();
  static const int kArg4FieldNumber = 5;
  const ::std::string& arg4() const;
  void set_arg4(const ::std::string& value);
  #if LANG_CXX11
  void set_arg4(::std::string&& value);
  #endif
  void set_arg4(const char* value);
  void set_arg4(const char* value, size_t size);
  ::std::string* mutable_arg4();
  ::std::string* release_arg4();
  void set_allocated_arg4(::std::string* arg4);

  // string arg5 = 6;
  void clear_arg5();
  static const int kArg5FieldNumber = 6;
  const ::std::string& arg5() const;
  void set_arg5(const ::std::string& value);
  #if LANG_CXX11
  void set_arg5(::std::string&& value);
  #endif
  void set_arg5(const char* value);
  void set_arg5(const char* value, size_t size);
  ::std::string* mutable_arg5();
  ::std::string* release_arg5();
  void set_allocated_arg5(::std::string* arg5);

  // @@protoc_insertion_point(class_scope:opencogservices.Command)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr arg1_;
  ::google::protobuf::internal::ArenaStringPtr arg2_;
  ::google::protobuf::internal::ArenaStringPtr arg3_;
  ::google::protobuf::internal::ArenaStringPtr arg4_;
  ::google::protobuf::internal::ArenaStringPtr arg5_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_opencog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandOutput

// string s = 1;
inline void CommandOutput::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandOutput::s() const {
  // @@protoc_insertion_point(field_get:opencogservices.CommandOutput.s)
  return s_.GetNoArena();
}
inline void CommandOutput::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencogservices.CommandOutput.s)
}
#if LANG_CXX11
inline void CommandOutput::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencogservices.CommandOutput.s)
}
#endif
inline void CommandOutput::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencogservices.CommandOutput.s)
}
inline void CommandOutput::set_s(const char* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencogservices.CommandOutput.s)
}
inline ::std::string* CommandOutput::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:opencogservices.CommandOutput.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandOutput::release_s() {
  // @@protoc_insertion_point(field_release:opencogservices.CommandOutput.s)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandOutput::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:opencogservices.CommandOutput.s)
}

// -------------------------------------------------------------------

// Command

// string cmd = 1;
inline void Command::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::cmd() const {
  // @@protoc_insertion_point(field_get:opencogservices.Command.cmd)
  return cmd_.GetNoArena();
}
inline void Command::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencogservices.Command.cmd)
}
#if LANG_CXX11
inline void Command::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencogservices.Command.cmd)
}
#endif
inline void Command::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencogservices.Command.cmd)
}
inline void Command::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencogservices.Command.cmd)
}
inline ::std::string* Command::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:opencogservices.Command.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_cmd() {
  // @@protoc_insertion_point(field_release:opencogservices.Command.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:opencogservices.Command.cmd)
}

// string arg1 = 2;
inline void Command::clear_arg1() {
  arg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::arg1() const {
  // @@protoc_insertion_point(field_get:opencogservices.Command.arg1)
  return arg1_.GetNoArena();
}
inline void Command::set_arg1(const ::std::string& value) {
  
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencogservices.Command.arg1)
}
#if LANG_CXX11
inline void Command::set_arg1(::std::string&& value) {
  
  arg1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencogservices.Command.arg1)
}
#endif
inline void Command::set_arg1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencogservices.Command.arg1)
}
inline void Command::set_arg1(const char* value, size_t size) {
  
  arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencogservices.Command.arg1)
}
inline ::std::string* Command::mutable_arg1() {
  
  // @@protoc_insertion_point(field_mutable:opencogservices.Command.arg1)
  return arg1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_arg1() {
  // @@protoc_insertion_point(field_release:opencogservices.Command.arg1)
  
  return arg1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_arg1(::std::string* arg1) {
  if (arg1 != NULL) {
    
  } else {
    
  }
  arg1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg1);
  // @@protoc_insertion_point(field_set_allocated:opencogservices.Command.arg1)
}

// string arg2 = 3;
inline void Command::clear_arg2() {
  arg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::arg2() const {
  // @@protoc_insertion_point(field_get:opencogservices.Command.arg2)
  return arg2_.GetNoArena();
}
inline void Command::set_arg2(const ::std::string& value) {
  
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencogservices.Command.arg2)
}
#if LANG_CXX11
inline void Command::set_arg2(::std::string&& value) {
  
  arg2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencogservices.Command.arg2)
}
#endif
inline void Command::set_arg2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencogservices.Command.arg2)
}
inline void Command::set_arg2(const char* value, size_t size) {
  
  arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencogservices.Command.arg2)
}
inline ::std::string* Command::mutable_arg2() {
  
  // @@protoc_insertion_point(field_mutable:opencogservices.Command.arg2)
  return arg2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_arg2() {
  // @@protoc_insertion_point(field_release:opencogservices.Command.arg2)
  
  return arg2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_arg2(::std::string* arg2) {
  if (arg2 != NULL) {
    
  } else {
    
  }
  arg2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg2);
  // @@protoc_insertion_point(field_set_allocated:opencogservices.Command.arg2)
}

// string arg3 = 4;
inline void Command::clear_arg3() {
  arg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::arg3() const {
  // @@protoc_insertion_point(field_get:opencogservices.Command.arg3)
  return arg3_.GetNoArena();
}
inline void Command::set_arg3(const ::std::string& value) {
  
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencogservices.Command.arg3)
}
#if LANG_CXX11
inline void Command::set_arg3(::std::string&& value) {
  
  arg3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencogservices.Command.arg3)
}
#endif
inline void Command::set_arg3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencogservices.Command.arg3)
}
inline void Command::set_arg3(const char* value, size_t size) {
  
  arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencogservices.Command.arg3)
}
inline ::std::string* Command::mutable_arg3() {
  
  // @@protoc_insertion_point(field_mutable:opencogservices.Command.arg3)
  return arg3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_arg3() {
  // @@protoc_insertion_point(field_release:opencogservices.Command.arg3)
  
  return arg3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_arg3(::std::string* arg3) {
  if (arg3 != NULL) {
    
  } else {
    
  }
  arg3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg3);
  // @@protoc_insertion_point(field_set_allocated:opencogservices.Command.arg3)
}

// string arg4 = 5;
inline void Command::clear_arg4() {
  arg4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::arg4() const {
  // @@protoc_insertion_point(field_get:opencogservices.Command.arg4)
  return arg4_.GetNoArena();
}
inline void Command::set_arg4(const ::std::string& value) {
  
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencogservices.Command.arg4)
}
#if LANG_CXX11
inline void Command::set_arg4(::std::string&& value) {
  
  arg4_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencogservices.Command.arg4)
}
#endif
inline void Command::set_arg4(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencogservices.Command.arg4)
}
inline void Command::set_arg4(const char* value, size_t size) {
  
  arg4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencogservices.Command.arg4)
}
inline ::std::string* Command::mutable_arg4() {
  
  // @@protoc_insertion_point(field_mutable:opencogservices.Command.arg4)
  return arg4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_arg4() {
  // @@protoc_insertion_point(field_release:opencogservices.Command.arg4)
  
  return arg4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_arg4(::std::string* arg4) {
  if (arg4 != NULL) {
    
  } else {
    
  }
  arg4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg4);
  // @@protoc_insertion_point(field_set_allocated:opencogservices.Command.arg4)
}

// string arg5 = 6;
inline void Command::clear_arg5() {
  arg5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Command::arg5() const {
  // @@protoc_insertion_point(field_get:opencogservices.Command.arg5)
  return arg5_.GetNoArena();
}
inline void Command::set_arg5(const ::std::string& value) {
  
  arg5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:opencogservices.Command.arg5)
}
#if LANG_CXX11
inline void Command::set_arg5(::std::string&& value) {
  
  arg5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:opencogservices.Command.arg5)
}
#endif
inline void Command::set_arg5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  arg5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:opencogservices.Command.arg5)
}
inline void Command::set_arg5(const char* value, size_t size) {
  
  arg5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:opencogservices.Command.arg5)
}
inline ::std::string* Command::mutable_arg5() {
  
  // @@protoc_insertion_point(field_mutable:opencogservices.Command.arg5)
  return arg5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_arg5() {
  // @@protoc_insertion_point(field_release:opencogservices.Command.arg5)
  
  return arg5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_arg5(::std::string* arg5) {
  if (arg5 != NULL) {
    
  } else {
    
  }
  arg5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arg5);
  // @@protoc_insertion_point(field_set_allocated:opencogservices.Command.arg5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace opencogservices

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_opencog_2eproto
