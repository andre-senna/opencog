/*
 * tests/nlp/scm2pgsql/SCMLoaderUTest.cxxtest
 *
 * Unity tests for opencog/nlp/scm2pgsql/SCMLoader
 * 
 * Copyright (C) 2016 OpenCog Foundation
 * All Rights Reserved
 *
 * Author: Andre Senna <https://github.com/andre-senna>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/nlp/scm2pgsql/SCMLoader.h>

using namespace opencog;
using namespace opencog::nlp;

class SCMLoaderUTest : public CxxTest::TestSuite
{
public:
    SCMLoaderUTest(void)
    {
        SchemeEval::init_scheme();
    }
    ~SCMLoaderUTest()
    {
    }
    void test_load(void);
};

/**
 * Read the same .scm using SCMLoader and standard scheme primitive. The
 * resulting AtomSpaces are compared.
 */
void SCMLoaderUTest::test_load(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    SchemeEval *schemeEval;

    AtomSpace atomSpace1;
    SchemeEval::set_scheme_as(&atomSpace1);
    schemeEval = new SchemeEval(&atomSpace1);
    schemeEval->eval("(use-modules (opencog nlp relex2logic))");
    atomSpace1.clear();
    schemeEval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "/tests/nlp/scm2pgsql\")");
    schemeEval->eval("(load-from-path \"atoms.scm\")");
    std::string answer1 = schemeEval->eval("(cog-prt-atomspace)");

    AtomSpace atomSpace2;
    SchemeEval::set_scheme_as(&atomSpace2);
    schemeEval = new SchemeEval(&atomSpace2);
    schemeEval->eval("(use-modules (opencog nlp relex2logic))");
    std::string fname = PROJECT_SOURCE_DIR;
    fname += "/tests/nlp/scm2pgsql/atoms.scm";
    bool loadReturnValue = SCMLoader::load(fname, atomSpace2);
    std::string answer2 = schemeEval->eval("(cog-prt-atomspace)");

    TSM_ASSERT("SCMLoad::load() returned error", !loadReturnValue);
    TSM_ASSERT("SCMLoad::load() and standard guile loading resulted in different AtomSpaces", answer1 == answer2);

    logger().debug("END TEST: %s", __FUNCTION__);
}
